<!DOCTYPE html>
<!--
	NOTES:
	1. All tokens are represented by '$' sign in the template.
	2. You can write your code only wherever mentioned.
	3. All occurrences of existing tokens will be replaced by their appropriate values.
	4. Blank lines will be removed automatically.
	5. Remove unnecessary comments before creating your template.
-->
<html>
<head>
<meta charset="UTF-8">
<meta name="authoring-tool" content="Adobe_Animate_CC">
<title>M365_FY21Q3ConsOpt_USA_300x250_BAN_AllUpShare_EN_NA_Standard_ANI_BN_NA_1</title>
<style>
	@font-face {
		font-family: 'Segoe Pro';
		src: local('â˜º'), url('fonts/SegoePro-Semibold.woff') format('woff');
		font-weight: normal;
		font-style: Regular;
		text-rendering: geometricPrecision;
	}
body {
    background-color:#909090;
    overflow: hidden;
}
</style>
<!-- <script>var clickTag = "http://www.google.com";</script>
<script src="copy.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.0.2/TweenMax.min.js"></script>
<script src="https://code.createjs.com/1.0.0/createjs.min.js"></script>
<script src="M365_FY21Q3ConsOpt_USA_300x250_BAN_AllUpShare_EN_NA_Standard_ANI_BN_NA_1.js?1501171107836"></script>
<meta name="ad.size" content="width=300,height=250">
<script>
var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation, initReady
initReady=false
function init() {
	canvas = document.getElementById("canvas");
	anim_container = document.getElementById("animation_container");
	dom_overlay_container = document.getElementById("dom_overlay_container");
	var comp=AdobeAn.getComposition("90A26FE74B042E4A89CA750D1DA2DF1F");
	var lib=comp.getLibrary();
	var loader = new createjs.LoadQueue(false);
	loader.addEventListener("fileload", function(evt){handleFileLoad(evt,comp)});
	loader.addEventListener("complete", function(evt){handleComplete(evt,comp)});
	var lib=comp.getLibrary();
	loader.loadManifest(lib.properties.manifest);
}
function handleFileLoad(evt, comp) {
	var images=comp.getImages();
	if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
}
function handleComplete(evt,comp) {
	//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
	var lib=comp.getLibrary();
	var ss=comp.getSpriteSheet();
	var queue = evt.target;
	var ssMetadata = lib.ssMetadata;
	for(i=0; i<ssMetadata.length; i++) {
		ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
	}
	exportRoot = new lib.M365_FY21Q3ConsOpt_USA_300x250_BAN_AllUpShare_EN_NA_Standard_ANI_BN_NA_1();
	stage = new lib.Stage(canvas);
	//Registers the "tick" event listener.
	fnStartAnimation = function() {
		stage.addChild(exportRoot);
		createjs.Ticker.framerate = lib.properties.fps;
		createjs.Ticker.addEventListener("tick", stage);
	}
	//Code to support hidpi screens and responsive scaling.
	AdobeAn.makeResponsive(false,'both',false,2,[canvas,anim_container,dom_overlay_container]);
	AdobeAn.compositionLoaded(lib.properties.id);
	fnStartAnimation();

	 if (!initReady) {
        startBanner()
    }
    TweenMax.delayedCall(0.2,function(){
			var getText = function(texts, refTexts, bound) {
				if(typeof texts[0] == 'string') {
					var polygonPoints = '16,40 140,40 170,100 122,120 147,170 90,195 16,195';
					var div = document.createElement('div');
					div.style.position = 'absolute';
					div.style.width = '100%';
					div.style.top = 0;
					div.style.left = 0;
					div.style.bottom = 0;
					// div.innerHTML = '<svg width="100%" height="100%"><polygon points="20,40 280,40 250,110 160,150 160,200 20,200" style="fill:#e5e5e5;stroke:#ccc;stroke-width:1" /></svg>'
					div.innerHTML = '<svg width="100%" height="100%"><polygon points="16,40 140,40 170,100 122,120 147,170 90,195 16,195" style="fill:#ff000080;stroke:#000;stroke-width:1" /></svg>'
					document.body.appendChild(div);
					var sampleText = texts[0];
		      var points = polygonPoints.trim().split(' ');
		      points = points.map(function(point){
		        return {x: +point.split(',')[0],y: +point.split(',')[1]}
		      });
		      points.push(points[0])
		      var lines = [];
		      for(var i = 0; i < points.length - 1; i++) {
		        var A = points[i]; //startPoint
		        var B = points[i + 1]; //endPoint
		        var m = (B.y - A.y)/(B.x - A.x); //Slope = (change in y)/(change in x)
		        var x = Math.abs(m) == Infinity ? A.x : (m == 0 ? 0 : (1/m) + ' * y + ' + (A.x - (A.y/m))); //Point Slope Formula: (y - y1) =  m(x - x1); x = [(y - y1) + mx1]/m;
		        var yRange = [A.y, B.y].sort(function(a,b){ return a - b; });
		        lines.push({A: A, B: B, m: m, x: x, yRange: yRange});
		      }
		      var style = document.createElement('style');
		      var head = document.head || document.getElementsByTagName('head')[0]
		      style.type = 'text/css';
		      var css = 't.br::before { content: "\\a"; white-space: pre; }';
		      if (style.styleSheet){
		        // This is required for IE8 and below.
		        style.styleSheet.cssText = css;
		      } else {
		        style.appendChild(document.createTextNode(css));
		      }
		      head.appendChild(style);
		      var getXRange = function(y){
		        var xRange = [];
		        var intersectingLines = lines.filter(function(line){ return line.yRange[0] <= y && line.yRange[1] >= y })
		        if(intersectingLines && intersectingLines.length) {
		          intersectingLines.map(function(line){ xRange.push(eval(line.x)) });
		        }
		        return xRange.sort(function(a, b){ return a - b; });
		      }
		      var blockToWords = function(element){
		        if(element) {
		          element.dataset.content = element.innerHTML;
		          element.dataset.height = element.style.height;
		          var htmlTags = element.innerHTML.match(/\<.*?\>/g);
		          htmlTags = htmlTags && htmlTags.length ? htmlTags : [];
		          var text = element.innerHTML.split(/\<.*?\>/g);
		          text = text.map(function(subText){
		            return subText.split(' ').map(function(word){ return word ? ('<t>' + word + '</t>') : ''; }).join(' ');
		          });
		          var longList = text, shortList = htmlTags, temp;
		          if(longList.length < shortList) { temp = longList; longList = shortList; shortList = temp; }
		          shortList.push('');
		          element.innerHTML = longList.map(function(text1, i) { return text1 + shortList[i]; }).join('');
		        }
		      }
		      var wordsToBlock = function(element) {
		        if(element) {
		          var wordChanges = element.querySelectorAll('t.br');
		          if(wordChanges && wordChanges.length) {
		            wordChanges.forEach(function(word){
		              word.parentNode.insertBefore(document.createElement('br'), word);
		              word.removeAttribute('class');
		            });
		          }
		          element.innerHTML = element.innerHTML.split(/\<t\>/g).join('').split(/\<\/t\>/g).join('');
		        }
		      }
		      var resizeText = function(element){
		        if(element) {
		          var fontSize = parseFloat(window.getComputedStyle(element, null).getPropertyValue('font-size'));
		          var width = element.offsetWidth;
		          var height = element.offsetHeight;
		          var span = element.querySelector('span');
		          if(span) {
		            if(span.offsetHeight > height || span.offsetWidth > width) {
		              for(var i = fontSize; i > 0; i-=0.1) {
		                element.style.fontSize = i + 'px';
		                if(span.offsetHeight <= height && span.offsetWidth <= width) { break; }
		              }
		            }
		          }
		        }
		      }
		      var alignWords = function(element) {
		        if(element) {
		          var words1 = words = element.querySelectorAll('t');
		          var span = element.querySelector('span');
		          if(words && words.length) { words.forEach(function(word, i){ word.removeAttribute('class'); }); }
		          if( span.offsetHeight > element.offsetHeight || span.offsetWidth > element.offsetWidth) { resizeText(element); }
		          var elementY = element.offsetTop;
		          var elementX = element.offsetLeft;
		          if(words && words.length) {
		            words.forEach(function(word, i){
		              // word.removeAttribute('class');
		              var x = word.offsetLeft + elementX;
		              var y = word.offsetTop;
		              var width = word.offsetWidth;
		              var height = word.offsetHeight;
		              var lineY = elementY + y + height/2;
		              var xRange = getXRange(lineY);
		              var wordText = word.innerHTML;
		              if(x < xRange[0] || (x + width) > xRange[1]) {
		                var availableWidth = xRange[1] - xRange[0];
		                if(width > availableWidth) {
		//////////////////
		                }
		                if(word.offsetLeft != 0) { word.classList.add('br'); }
		              }
		              else if(i > 0 && word.offsetTop != words1[i-1].offsetTop && !words1[i-1].classList.contains('br')) { word.classList.add('br'); }
		            });
		          }
		          element.innerHTML = element.innerHTML.split('<br>').join('');
		          if(element.style.height) {
		            var span = element.querySelector('span');
		            if(element.offsetHeight < span.offsetHeight || element.offsetWidth < span.offsetWidth) {
		              var fontSize = parseFloat(window.getComputedStyle(element, null).getPropertyValue('font-size'));
		              element.style.fontSize = (fontSize - 0.1) + 'px';
		              alignWords(element);
		            }
		          }
		        }
		      }
		      var levelWords = function(element, flag) {
		        if(element) {
		          var words1 = words = element.querySelectorAll('t');
		          var span = element.querySelector('span');
							span.style.display = 'inline-block';
		          if(!span.dataset.height) { span.dataset.height = span.offsetHeight; }
		          var spanHeight = parseFloat(span.dataset.height);
		          span.style.width = (flag ? (span.offsetWidth + 1) : (span.offsetWidth - 5)) + 'px';
		          var elementY = element.offsetTop;
		          var elementX = element.offsetLeft;
		          if(words && words.length) {
		            words.forEach(function(word, i){
		              word.removeAttribute('class');
		              var x = word.offsetLeft + elementX;
		              var y = word.offsetTop;
		              var width = word.offsetWidth;
		              var height = word.offsetHeight;
		              var lineY = elementY + y + height/2;
		              var xRange = getXRange(lineY);
		              var wordText = word.innerHTML;
		              if(x < xRange[0] || (x + width) > xRange[1]) {
		                var availableWidth = xRange[1] - xRange[0];
		                if(width > availableWidth) {
		//////////////////
		                }
		                if(word.offsetLeft != 0) { word.classList.add('br'); }
		              }
		              else if(i > 0 && word.offsetTop != words1[i-1].offsetTop && !words1[i-1].classList.contains('br')) { word.classList.add('br'); }
		            });
		          }
		          if(spanHeight == span.offsetHeight && !flag) {
		            levelWords(element);
		          } else if(spanHeight != span.offsetHeight) {
		            levelWords(element, true);
		          } else {
		            span.removeAttribute('style');
		            span.removeAttribute('data-height');
		          }
		        }
		      }

					var textField = document.createElement('div');
					textField.style.position = 'absolute';
					textField.style.top = refTexts[0][3] + 'px';
					textField.style.left = refTexts[0][2] + 'px';
					textField.style.height = '155px';
					textField.style.fontFamily = 'Segoe Pro';
					textField.style.fontSize = refTexts[0][1];
					textField.style.lineHeight = 1.1;

					div.appendChild(textField);
		      // var textField = document.querySelector('#textField');
		      textField.innerHTML = sampleText;
		      if(!(textField.childElementCount == 1 && textField.firstChild.tagName == 'SPAN')) {
		        var span = document.createElement('span');
		        span.innerHTML = textField.innerHTML;
		        textField.innerHTML = '';
		        textField.appendChild(span);
		      }
		      var textAlignment = window.getComputedStyle(textField).textAlign;
		      var xValues = [];
		      points.forEach(function(point) { xValues.push(point.x) });
		      var xMin = xValues.sort(function(a, b) { return a - b; })[0];
		      var xMax = xValues.sort(function(a, b) { return b - a; })[0];
		      if(textAlignment == 'start' || textAlignment == 'left') {

		        if(textField.style.right){
		          //Pending
		        } else if(textField.style.left && xMin > parseFloat(textField.style.left)){
		          textField.style.left = xMin + 'px';
		          if((xMax - xMin) < textField.offsetWidth) {
		            textField.style.width = (xMax - xMin) + 'px';
		          }
		        }
		      } else if(textAlignment == 'right') {
		        //Pending
		      } else if(textAlignment == 'center') {
		        //Pending
		      }
		      blockToWords(textField);
		      alignWords(textField);
		      levelWords(textField);
		      // wordsToBlock(textField);
				}
				return texts;
			}
			var ctaAlignment = function(position){
        position = position ? position : 'left';
        var layers = exportRoot.mainMC;
        var adWidth = document.querySelector('#animation_container').offsetWidth;
        var ctaBackgroundColor = layers.cta.children[0].graphics._fill.style;
        var ctaWidth = layers.txtCta.children[0].children[0].getBounds().width + 45;
        layers.txtCta.regX = 0;
        layers.txtCta.children[0].x = 0;
        layers.txtCta.children[0].y += 1;
        layers.cta.regX = 0;
        layers.cta.regY = 0;
        layers.cta.scaleX = 1;
        layers.cta.scaleY = 1;
        layers.cta.arrow.y = 0;
        layers.cta.arrow.arrow_1.x = 0;
        layers.cta.arrow.arrow.x = 0;
        layers.cta.arrow.arrow_1.regX = 0;
        layers.cta.arrow.arrow.regX = 0;
        layers.cta.arrow.regX = 0;
        layers.cta.children[0].x = 0;
        layers.cta.children[0].y = 0;
        layers.cta.children[0].scaleX = 1;
        layers.cta.children[0].scaleY = 1;
        layers.cta.children[0].regX = 0;
        layers.cta.children[0].regY = 0;
        layers.cta.children[0].graphics.clear();
        layers.cta.children[0].graphics.beginFill(ctaBackgroundColor).drawRect(0, -14, ctaWidth, 28);
        if(position == 'right') {
          layers.cta.x = adWidth - ctaWidth;
          layers.txtCta.x = adWidth - ctaWidth + 15;
          layers.cta.arrow.x = ctaWidth - 20;
        } else {
          layers.cta.x = 0;
          layers.txtCta.x = 15;
          layers.cta.arrow.x = ctaWidth - 20;
        }
      }
			// ['<#505050>Itâ€™s like 6|subscriptions|in one','19px',16,41,'20','100', 'left']
			// ['<#505050>Everyone you share |Microsoft 365 Family |with getsÂ 1 TB |of OneDrive |cloud storageâ€‹','11px',16,110,'15','350','left']
      var iframe = window.frameElement;
      var parentWindow = iframe.contentWindow.parent ? iframe.contentWindow.parent  : iframe.contentWindow;
      var bannerData = parentWindow.getBannerData();
			var texts = getText([bannerData.textField1, bannerData.textField2], [['<#505050>dummyText','19px',16,41,'20','100', 'left'],['<#505050>dummyTextâ€‹','11px',16,110,'15','350','left']], );
      // bannerData.headline1 = texts[0];
      // bannerData.headline2 = texts[1];
			// bannerData.headline1 = eval(bannerData.textField1);
      // bannerData.headline2 = eval(bannerData.textField2);
			bannerData.headline1 = eval("['<#505050>Itâ€™s like 6|subscriptions|in one','19px',16,41,'20','100', 'left']");
      bannerData.headline2 = eval("['<#505050>Every Microsoft 365|Family user can use|it on multiple|devices at the|same time','11px',16,110,'15','350','left']");
			bannerData.ctaText = bannerData.ctaText.replace('<br>', '\n');
      bannerData.CTA = bannerData.ctaText ? ['<#FFFFFF>' + bannerData.ctaText,(bannerData.ctaText.length >= 15 ? "8.5px" : "12px"),0,0,"50","300", "center"] : '';
      animation_container.addEventListener("click", function(){
        parentWindow.amo.onDynAdClick(parentWindow.adData.feedData, "CLICK", parentWindow.adClickUrl);
        if(bannerData.clickTracker) {
          var clickTrackers = bannerData.clickTracker.split('^');
          clickTrackers.forEach(function(url){
            if(url && url.toLowerCase() != 'na') {
                (new Image()).src = url;
            }
          });
        }
      });
      if(bannerData.impressionTracker) {
        var impressionTrackers = bannerData.impressionTracker.split('^');
        impressionTrackers.forEach(function(url){
          if(url && url.toLowerCase() != 'na') {
              (new Image()).src = url;
          }
        });
      }
      exportRoot.initBanner(bannerData)
      ctaAlignment('left')
      exportRoot.runBanner()
    })
	initReady=true
}

var loadFont = false
	var loadBody = false
	function loaded(type) {
		if (type=='font') loadFont=true
		if (type=='body') loadBody=true
		if (loadFont && loadBody) init()
	}

	(function() {
		// Optimization for Repeat Views

		/* Font Face Observer v2.0.13 - Â© Bram Stein. License: BSD-3-Clause */
		(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&"object"==typeof b&&"function"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}
		function r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?"function"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&("function"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};
		function w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype["catch"]=n.prototype.g);}());
		(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function r(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
		this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
		function t(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:"+b+";"}function y(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;y(a)&&a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);y(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,C=null,E=null,F=null;function G(){if(null===C)if(J()&&/Apple/.test(window.navigator.vendor)){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);C=!!a&&603>parseInt(a[1],10)}else C=!1;return C}function J(){null===F&&(F=!!document.fonts);return F}
		function K(){if(null===E){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}E=""!==a.style.font}return E}function L(a,b){return[a.style,a.weight,K()?a.stretch:"","100px",b].join(" ")}
		A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",q=0,D=b||3E3,H=(new Date).getTime();return new Promise(function(a,b){if(J()&&!G()){var M=new Promise(function(a,b){function e(){(new Date).getTime()-H>=D?b():document.fonts.load(L(c,'"'+c.family+'"'),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),N=new Promise(function(a,c){q=setTimeout(c,D)});Promise.race([N,M]).then(function(){clearTimeout(q);a(c)},function(){b(c)})}else m(function(){function u(){var b;if(b=-1!=
		f&&-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==v&&g==v&&h==v||f==w&&g==w&&h==w||f==x&&g==x&&h==x)),b=!b;b&&(d.parentNode&&d.parentNode.removeChild(d),clearTimeout(q),a(c))}function I(){if((new Date).getTime()-H>=D)d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===a||void 0===a)f=e.a.offsetWidth,
		g=n.a.offsetWidth,h=p.a.offsetWidth,u();q=setTimeout(I,50)}}var e=new r(k),n=new r(k),p=new r(k),f=-1,g=-1,h=-1,v=-1,w=-1,x=-1,d=document.createElement("div");d.dir="ltr";t(e,L(c,"sans-serif"));t(n,L(c,"serif"));t(p,L(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);v=e.a.offsetWidth;w=n.a.offsetWidth;x=p.a.offsetWidth;I();z(e,function(a){f=a;u()});t(e,L(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;u()});t(n,L(c,'"'+c.family+'",serif'));
		z(p,function(a){h=a;u()});t(p,L(c,'"'+c.family+'",monospace'))})})};"object"===typeof module?module.exports=A:(window.FontFaceObserver=A,window.FontFaceObserver.prototype.load=A.prototype.load);}());
		var fontA = new FontFaceObserver('Segoe Pro');
		Promise.all([
			fontA.load(null, 10000),
		]).then(function () {
			//loading();
			loaded('font')
		});
	})();


</script>
<!-- write your code here -->
</head>
<body onload="init();" style="margin:0px;">
<div id="rHit" style="display:block; position:absolute; top:0px; left:278px; width:22px; height:22px; z-index:100000 !important; cursor:pointer; "></div>
<div id="animation_container" style="background-color:#0078D4; width:300px; height:250px">
<canvas id="canvas" width="300" height="250" style="position: absolute; display: block; background-color:#FFFFFF; cursor:pointer;" aria-label="6 people on 1 subscription. Every Microsoft 3 6 5 Family user can access it onÂ 5Â devices each. Buy now." role="img"></canvas>		<div id="dom_overlay_container" style="pointer-events:none; overflow:hidden; width:300px; height:250px; position: absolute; left: 0px; top: 0px; display: block;">
		<div style="position: absolute; border: 1px solid black; box-sizing: border-box; background-color:transparent; top: 0; left: 0; width: 100%; bottom: 0;"></div>
		</div>
	</div>


<script>
var startBanner = function(){
				var varInt

				var rHit = document.getElementById("rHit");
				rHit.addEventListener("mouseover", rHitOver.bind(this));
				function rHitOver()  {  exportRoot.mainMC.replay_btn.gotoAndStop(1)	}

				rHit.addEventListener("mouseout", rHitOut.bind(this));
				function rHitOut()   {  exportRoot.mainMC.replay_btn.gotoAndStop(0)	}

				var animation_container = document.getElementById("animation_container");
				animation_container.addEventListener("mouseover", over.bind(this));
				function over() {
				exportRoot.mainMC.cta.arrow.gotoAndStop(1);
					if (exportRoot.shadowReplay == true){
									 	exportRoot.mainMC.anim_1.finalman.shadow.gotoAndPlay("loop");
									 	}
				}

				animation_container.addEventListener("mouseout", out.bind(this));
				function out() {
						exportRoot.mainMC.cta.arrow.gotoAndStop(0);
				}
				// animation_container.addEventListener("click", exitHandler.bind(this));
				// function exitHandler() {
				//   window.open(clickTag);
				// }
				rHit.addEventListener("click", replay.bind(this));

				function replay() {
					if (exportRoot.isReplay == true){

						TweenMax.killAll();
						stage.removeAllChildren();
						stage.update();
                        var canvas = document.getElementById('canvas');
                        context = canvas.getContext('2d');

                        // Store the current transformation matrix
                        context.save();

                        // Use the identity matrix while clearing the canvas
                        context.setTransform(1, 0, 0, 1, 0, 0);
                        context.clearRect(0, 0, canvas.width, canvas.height);

                        // Restore the transform
                        context.restore(); //CLEARS THE SPECIFIC CANVAS COMPLETELY FOR NEW DRAWING

						TweenMax.delayedCall(0.1,init)
					}
				}



		}
</script>
</body>
</html>
