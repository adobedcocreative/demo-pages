<!DOCTYPE html>
<!--
	NOTES:
	1. All tokens are represented by '$' sign in the template.
	2. You can write your code only wherever mentioned.
	3. All occurrences of existing tokens will be replaced by their appropriate values.
	4. Blank lines will be removed automatically.
	5. Remove unnecessary comments before creating your template.
-->
<html>
<head>
<meta charset="UTF-8">
<meta name="authoring-tool" content="Adobe_Animate_CC">
<title>M365_FY21Q2ConsRefresh_USA_160x600_BAN_3DCubeINT_English_NA_Standard_ANI_BN_NA_1</title>
<!-- write your code here -->
<style>
	@font-face {
		font-family: 'Segoe Pro';
		src: local('â˜º'), url('fonts/SegoePro-Semibold.woff') format('woff');
		font-weight: normal;
		font-style: Regular;
		text-rendering: geometricPrecision;
	}
      .img-container {
        text-align: center;
           vertical-align: middle;
           text-align: center;

  	}
  	body {
		overflow: hidden;
	}
</style>
<!-- <script>var clickTag1 = "http://www.google.com";</script>
<script>var clickTag2 = "http://www.adobe.com";</script>
<script>var clickTag3 = "http://www.microsoft.com";</script>
<script>var clickTag4 = "http://www.yahoo.com";</script>
<script src="copy.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.0.2/TweenMax.min.js"></script>
<script src="https://code.createjs.com/1.0.0/createjs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.0.5/gsap.min.js"></script>
<script src="OrbitControls.js"></script>
<script src="https://cdn.rawgit.com/mrdoob/three.js/r120/examples/js/loaders/GLTFLoader.js"></script>
<meta name="ad.size" content="width=160,height=600">
<script src="M365_FY21Q2ConsRefresh_USA_160x600_BAN_3DCubeINT_English_NA_Standard_ANI_BN_NA_1.js?1578558374349"></script>
<script src="screen1.js"></script>
<script src="screen2.js"></script>
<script src="screen3.js"></script>
<script src="screen4.js"></script>
<script>


var canvas, canvas1, canvas2, canvas3, canvas4, stage, stage1, stage2, stage3, stage4, exportRoot, exportRoot1, exportRoot2, exportRoot3, exportRoot4, anim_container, dom_overlay_container, fnStartAnimation, screen1, screen2, screen3, screen4;
var canRelease = false
var canDrag = true
function iOS() {
  return [
    'iPad Simulator',
    'iPhone Simulator',
    'iPod Simulator',
    'iPad',
    'iPhone',
    'iPod'
  ].includes(navigator.platform)
  // iPad on iOS 13 detection
  || (navigator.userAgent.includes("Mac") && "ontouchend" in document)
}
var isIOS = iOS()


var initReady=false;
var vidID = new Array()
function init() {
    setupCanvas4()
}
function setupCanvas() {
	canvas = document.getElementById("canvas");
	anim_container = document.getElementById("animation_container");
	dom_overlay_container = document.getElementById("dom_overlay_container");
	var comp=AdobeAn.getComposition("90A26FE74B042E4A89CA750D1DA2DF1F");
	var lib=comp.getLibrary();
	handleComplete({},comp);
}
function setupCanvas1() {
	canvas1 = document.getElementById("canvas1");
	var comp=AdobeAn.getComposition("20B396A144B6A147B6E87DD2DC23AB3D");

	var lib=comp.getLibrary();
	var loader = new createjs.LoadQueue(false);
	loader.addEventListener("fileload", function(evt){handleFileLoad1(evt,comp)});
	loader.addEventListener("complete", function(evt){handleComplete1(evt,comp)});
	var lib=comp.getLibrary();
	loader.loadManifest(lib.properties.manifest);
}
function setupCanvas2() {
	canvas2 = document.getElementById("canvas2");
	var comp=AdobeAn.getComposition("20B396A144B6A147B6E87DD2DC23AB3C");

	var lib=comp.getLibrary();
	var loader = new createjs.LoadQueue(false);
	loader.addEventListener("fileload", function(evt){handleFileLoad2(evt,comp)});
	loader.addEventListener("complete", function(evt){handleComplete2(evt,comp)});
	var lib=comp.getLibrary();
	loader.loadManifest(lib.properties.manifest);
}
function setupCanvas3() {
	canvas3 = document.getElementById("canvas3");
	var comp=AdobeAn.getComposition("20B396A144B6A147B6E87DD2DC23AB3A");
	var lib=comp.getLibrary();
	var loader = new createjs.LoadQueue(false);
	loader.addEventListener("fileload", function(evt){handleFileLoad3(evt,comp)});
	loader.addEventListener("complete", function(evt){handleComplete3(evt,comp)});
	var lib=comp.getLibrary();
	loader.loadManifest(lib.properties.manifest);
}
function setupCanvas4() {
	canvas4 = document.getElementById("canvas4");
	var comp=AdobeAn.getComposition("20B396A144B6A147B6E87DD2DC23AB3E");
	var lib=comp.getLibrary();
	var loader = new createjs.LoadQueue(false);
	loader.addEventListener("fileload", function(evt){handleFileLoad4(evt,comp)});
	loader.addEventListener("complete", function(evt){handleComplete4(evt,comp)});
	var lib=comp.getLibrary();
	loader.loadManifest(lib.properties.manifest);
}




function handleFileLoad(evt, comp) {
	var images=comp.getImages();
	if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
}
function handleComplete(evt,comp) {

	//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
	var lib=comp.getLibrary();
	var ss=comp.getSpriteSheet();
	exportRoot = new lib.M365_FY21Q2ConsRefresh_USA_160x600_BAN_3DCubeINT_English_NA_Standard_ANI_BN_NA_1();
	stage = new lib.Stage(canvas);
	//Registers the "tick" event listener.
	fnStartAnimation = function() {
		stage.addChild(exportRoot);
		createjs.Ticker.framerate = lib.properties.fps;
		createjs.Ticker.addEventListener("tick", stage);
	}
	//Code to support hidpi screens and responsive scaling.
	AdobeAn.makeResponsive(false,'both',false,2,[canvas,anim_container,dom_overlay_container]);
	AdobeAn.compositionLoaded(lib.properties.id);
	fnStartAnimation();
    stage.enableMouseOver(30)
    //
    //
    //  FINAL LOAD CODE
    //
    //
        TweenMax.delayedCall(0.5,function(){
    if (isIOS) {
        runEverything()
    } else {
        var lItem2 = null;
        var lItem3 = null;
        var lItem4 = null;
        // Now lets create and play the video using createjs.Bitmap

        lItem2 = createVideoBitmap(256, 256, "videos/Share_OneDrive_16x9_160x600_1.mp4");
        lItem3 = createVideoBitmap(256, 256, "videos/Creativity_PPT_16x9_160x600_1.mp4");
        lItem4 = createVideoBitmap(256, 256, "videos/Productivity_Word_16x9_160x600_1.mp4");

        exportRoot2.mainMC.addChild(lItem2)
        exportRoot3.mainMC.addChild(lItem3)
        exportRoot4.mainMC.addChild(lItem4)
        exportRoot2.mainMC.static2.visible = false
        exportRoot3.mainMC.static3.visible = false
        exportRoot4.mainMC.static4.visible = false
    }
        })


    var videosLoaded=0
    function videoCheck(videosLoaded) {
        if (videosLoaded>2) {
            runEverything();

        }
    }
    function runEverything() {
    		var iframe = window.frameElement;
			var parentWindow = iframe.contentWindow.parent ? iframe.contentWindow.parent  : iframe.contentWindow;
			var bannerData = parentWindow.getBannerData();
			bannerData.headline1 = eval(bannerData.textField1.split('^')[0]);
			bannerData.headline1_1 = eval(bannerData.textField1.split('^')[1]);
			bannerData.headline1_2 = eval(bannerData.textField1.split('^')[2]);
			bannerData.headline2_1 = eval(bannerData.textField2.split('^')[0]);
			bannerData.headline2_2 = eval(bannerData.textField2.split('^')[1]);
			bannerData.headline2_3 = eval(bannerData.textField2.split('^')[2]);
			bannerData.headline2_4 = eval(bannerData.textField2.split('^')[3]);
			bannerData.headline2_5 = eval(bannerData.textField2.split('^')[4]);
			bannerData.headline3_1 = eval(bannerData.textField3.split('^')[0]);
			bannerData.headline3_2 = eval(bannerData.textField3.split('^')[1]);
			bannerData.headline3_3 = eval(bannerData.textField3.split('^')[2]);
			bannerData.headline3_4 = eval(bannerData.textField3.split('^')[3]);
			bannerData.headline3_5 = eval(bannerData.textField3.split('^')[4]);
			bannerData.headline4_1 = eval(bannerData.textField4.split('^')[0]);
			bannerData.headline4_2 = eval(bannerData.textField4.split('^')[1]);
			bannerData.headline4_3 = eval(bannerData.textField4.split('^')[2]);
			bannerData.headline4_4 = eval(bannerData.textField4.split('^')[3]);
			bannerData.headline4_5 = eval(bannerData.textField4.split('^')[4]);
			bannerData.CTA = bannerData.ctaText ? ['<#FFFFFF>' + bannerData.ctaText,"14px",7,-1,"50","300", "center"] : '';
			amoAdClick = function(id) {
				parentWindow.amo.onDynAdClick(parentWindow.adData.feedData, "CLICK", parentWindow.adClickUrl[id]);
				if(bannerData.clickTracker) {
					var clickTrackers = bannerData.clickTracker.split('^');
					clickTrackers.forEach(function(url){
						if(url && url.toLowerCase() != 'na') {
								(new Image()).src = url;
						}
					});
				}
			}
			if(bannerData.impressionTracker) {
				var impressionTrackers = bannerData.impressionTracker.split('^');
				impressionTrackers.forEach(function(url){
					if(url && url.toLowerCase() != 'na') {
							(new Image()).src = url;
					}
				});
			}
            exportRoot.initBanner(bannerData)
			exportRoot.runBanner();
            exportRoot1.initBanner(bannerData)
			exportRoot1.runBanner();
            exportRoot2.initBanner(bannerData)
			exportRoot2.runBanner();
            exportRoot3.initBanner(bannerData)
			exportRoot3.runBanner();
            exportRoot4.initBanner(bannerData)
			exportRoot4.runBanner();
            startBanner()
            createjs.Touch.enable( stage, false, true );
    }
	function createVideoBitmap(lWidth, lHeight, lVideoPath) {
	    // lets dynamically add a video element
	    var lVideo = document.createElement('video');
        lVideo.playsInline = true;
        lVideo.autoClear = false
	    // Add a listener for errors etc
	    var self = this; // Store a reference to this
	    lVideo.addEventListener("error", function (evt) {
	        var lErrMesg = "Error loading video element, event.type [" + evt.type + "]  Media Details: [" + evt.target.src + "]";
	        console.log(lErrMesg);

	    });

	    lVideo.addEventListener("abort", function (evt) {
	        var lErrMesg = "Abort/Error loading video element, event.type [" + evt.type + "] Media Details: [" + evt.target.src + "]";
	        console.log(lErrMesg);
	    });

	    lVideo.addEventListener("loadeddata", function (evt) {
	        var lMesg = "Media element can be played, event.type [" + evt.type + "] Media Details: [" + evt.target.src + "]";;
	        console.log(lMesg);
	        videosLoaded++
            videoCheck(videosLoaded)
	    });

	    // Video element is not visible
	    lVideo.style.display = "none";


	    // Set the volume and controls
	    lVideo.volume = 0
	    lVideo.controls = true;

	    // Now set the path to the video
	    lVideo.src = lVideoPath;

	    // Set the width and height of the video element
	    lVideo.width = lWidth;
	    lVideo.height = lHeight;
	    // Play the video
	    //lVideo.play()
        lVideo.currentTime = 0.1;
        lVideo.pause()
        vidID.push(lVideo)
	    // Now lets create the bitmap
	    var swVideoBM = new createjs.Bitmap(lVideo);
        //var swVideoBM = lVideo
	    return swVideoBM;
	}; // end_function createVideoBitmap
}
function handleFileLoad1(evt, comp) {
	var images=comp.getImages();
	if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
}
function handleComplete1(evt,comp) {

	//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
	var lib=comp.getLibrary();
	var ss=comp.getSpriteSheet();
	var queue = evt.target;
	var ssMetadata = lib.ssMetadata;
	for(i=0; i<ssMetadata.length; i++) {
		ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
	}

	exportRoot1 = new lib.screen1();
	stage1 = new lib.Stage(canvas1);
	//Registers the "tick" event listener.
	fnStartAnimation = function() {
		stage1.addChild(exportRoot1);
		createjs.Ticker.framerate = lib.properties.fps;
		createjs.Ticker.addEventListener("tick", stage1);
	}
	//Code to support hidpi screens and responsive scaling.
	AdobeAn.compositionLoaded(lib.properties.id);
	fnStartAnimation();
    setupCanvas()
    aCont.removeChild(canvas1)
}
function handleFileLoad2(evt, comp) {
	var images=comp.getImages();
	if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
}
function handleComplete2(evt,comp) {

	//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
	var lib=comp.getLibrary();
	var ss=comp.getSpriteSheet();
	var queue = evt.target;
	var ssMetadata = lib.ssMetadata;
	for(i=0; i<ssMetadata.length; i++) {
		ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
	}

	exportRoot2 = new lib.screen2();
	stage2 = new lib.Stage(canvas2);
	//Registers the "tick" event listener.
	fnStartAnimation = function() {
		stage2.addChild(exportRoot2);
		createjs.Ticker.framerate = lib.properties.fps;
		createjs.Ticker.addEventListener("tick", stage2);
	}
	//Code to support hidpi screens and responsive scaling.
	AdobeAn.compositionLoaded(lib.properties.id);
	fnStartAnimation();
    setupCanvas1()
    aCont.removeChild(canvas2)
}
function handleFileLoad3(evt, comp) {
	var images=comp.getImages();
	if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
}
function handleComplete3(evt,comp) {

	//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
	var lib=comp.getLibrary();
	var ss=comp.getSpriteSheet();
	var queue = evt.target;
	var ssMetadata = lib.ssMetadata;
	for(i=0; i<ssMetadata.length; i++) {
		ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
	}

	exportRoot3 = new lib.screen3();
	stage3 = new lib.Stage(canvas3);
	//Registers the "tick" event listener.
	fnStartAnimation = function() {
		stage3.addChild(exportRoot3);
		createjs.Ticker.framerate = lib.properties.fps;
		createjs.Ticker.addEventListener("tick", stage3);
	}
	//Code to support hidpi screens and responsive scaling.
	AdobeAn.compositionLoaded(lib.properties.id);
	fnStartAnimation();
    setupCanvas2();
    aCont.removeChild(canvas3);
}
function handleFileLoad4(evt, comp) {
	var images=comp.getImages();
	if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
}
function handleComplete4(evt,comp) {

	//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
	var lib=comp.getLibrary();
	var ss=comp.getSpriteSheet();
	var queue = evt.target;
	var ssMetadata = lib.ssMetadata;
	for(i=0; i<ssMetadata.length; i++) {
		ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
	}

	exportRoot4 = new lib.screen4();
	stage4 = new lib.Stage(canvas4);
	//Registers the "tick" event listener.
	fnStartAnimation = function() {
		stage4.addChild(exportRoot4);
		createjs.Ticker.framerate = lib.properties.fps;
		createjs.Ticker.addEventListener("tick", stage4);
	}
	//Code to support hidpi screens and responsive scaling.
	AdobeAn.compositionLoaded(lib.properties.id);
	fnStartAnimation();
    setupCanvas3()
    aCont.removeChild(canvas4)
}
var loadFont = false
	var loadBody = false
	function loaded(type) {
		if (type=='font') loadFont=true
		if (type=='body') loadBody=true
		if (loadFont && loadBody) init()
	}

	(function() {
		// Optimization for Repeat Views

		/* Font Face Observer v2.0.13 - Â© Bram Stein. License: BSD-3-Clause */
		(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&"object"==typeof b&&"function"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}
		function r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?"function"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&("function"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};
		function w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype["catch"]=n.prototype.g);}());
		(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function r(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
		this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
		function t(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:"+b+";"}function y(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;y(a)&&a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);y(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,C=null,E=null,F=null;function G(){if(null===C)if(J()&&/Apple/.test(window.navigator.vendor)){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);C=!!a&&603>parseInt(a[1],10)}else C=!1;return C}function J(){null===F&&(F=!!document.fonts);return F}
		function K(){if(null===E){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}E=""!==a.style.font}return E}function L(a,b){return[a.style,a.weight,K()?a.stretch:"","100px",b].join(" ")}
		A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",q=0,D=b||3E3,H=(new Date).getTime();return new Promise(function(a,b){if(J()&&!G()){var M=new Promise(function(a,b){function e(){(new Date).getTime()-H>=D?b():document.fonts.load(L(c,'"'+c.family+'"'),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),N=new Promise(function(a,c){q=setTimeout(c,D)});Promise.race([N,M]).then(function(){clearTimeout(q);a(c)},function(){b(c)})}else m(function(){function u(){var b;if(b=-1!=
		f&&-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==v&&g==v&&h==v||f==w&&g==w&&h==w||f==x&&g==x&&h==x)),b=!b;b&&(d.parentNode&&d.parentNode.removeChild(d),clearTimeout(q),a(c))}function I(){if((new Date).getTime()-H>=D)d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===a||void 0===a)f=e.a.offsetWidth,
		g=n.a.offsetWidth,h=p.a.offsetWidth,u();q=setTimeout(I,50)}}var e=new r(k),n=new r(k),p=new r(k),f=-1,g=-1,h=-1,v=-1,w=-1,x=-1,d=document.createElement("div");d.dir="ltr";t(e,L(c,"sans-serif"));t(n,L(c,"serif"));t(p,L(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);v=e.a.offsetWidth;w=n.a.offsetWidth;x=p.a.offsetWidth;I();z(e,function(a){f=a;u()});t(e,L(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;u()});t(n,L(c,'"'+c.family+'",serif'));
		z(p,function(a){h=a;u()});t(p,L(c,'"'+c.family+'",monospace'))})})};"object"===typeof module?module.exports=A:(window.FontFaceObserver=A,window.FontFaceObserver.prototype.load=A.prototype.load);}());
		var fontA = new FontFaceObserver('Segoe Pro');
		Promise.all([
			fontA.load(null, 10000),
		]).then(function () {
			//loading();
			loaded('font')
		});
	})();

</script>
<!-- write your code here -->
</head>
<body onload="init();" style="margin:0px;">
 <div class="img-container" id="img" style="width:160px; height:50px; display: block; position: absolute; z-index: 1 !important; top:250px"> <!-- Block parent element -->
      <img src="images/LoadingIcon_Small.gif" alt="loading">
    </div>
	<div id="webGL_container" style="width:160px; height:600px; position: absolute; background-color:transparent; z-index: 10"></div>
	<div id="animation_container" style="background-color:#FFFFFF; width:160px; height:600px">
		<canvas id="canvas" width="160" height="600" style="position: absolute; display: block; background-color:transparent;z-index: 10000 !important; cursor:pointer;"></canvas>
		<canvas id="canvas1" style="display:none; position:absolute;" width="256" height="1024"></canvas>
        <canvas id="canvas2" style="display:none; position:absolute;" width="256" height="1024"></canvas>
        <canvas id="canvas3" style="display:none; position:absolute;" width="256" height="1024"></canvas>
        <canvas id="canvas4" style="display:none; position:absolute;" width="256" height="1024"></canvas>
		<div id="dom_overlay_container" style="pointer-events:none; overflow:hidden; width:160px; height:600px; position: absolute; left: 0px; top: 0px; display: block; z-index: 10005 !important;">
		<div style="position: absolute; border: 1px solid black; box-sizing: border-box; background-color:transparent; top: 0; left: 0; width: 100%; bottom: 0;"></div>
		</div>

	</div>


<script>
var aCont = document.getElementById("animation_container");
function addEvent(obj, evt, fn) {
    if (obj.addEventListener) {
        obj.addEventListener(evt, fn, false);
    }
    else if (obj.attachEvent) {
        obj.attachEvent("on" + evt, fn);
    }
}
addEvent(window,"load",function(e) {
    addEvent(document, "mouseout", function(e) {
        e = e ? e : window.event;
        var from = e.relatedTarget || e.toElement;
        if (!from || from.nodeName == "HTML") {


                gsap.delayedCall( 0.01, function(){ exportRoot.mainMC.hit.dispatchEvent("pressup");canDrag = false;} )
        }
    });
});

startBanner = function(){

				exportRoot.threeJS_tl1 = gsap.timeline();
				var varInt

                stage.enableMouseOver();
				var animation_container = exportRoot.mainMC.hitCTA //document.getElementById("animation_container");
                exportRoot.mainMC.hitCTA.mouseChildren = false
				animation_container.addEventListener("mouseover", function(event) {
				exportRoot.mainMC.cta.arrow.gotoAndStop(1);
				})

				animation_container.addEventListener("mouseout", function(event) {
				    exportRoot.mainMC.cta.arrow.gotoAndStop(0);
				})
				animation_container.addEventListener("click", function(event) {
					amoAdClick(faceID)
				})
				// animation_container.addEventListener("click", function(event) {

    //                 if (faceID==0) window.open(clickTag1);
    //                 if (faceID==1) window.open(clickTag2);
    //                 if (faceID==2) window.open(clickTag3);
    //                 if (faceID==3) window.open(clickTag4);
				// })

                var init = 0;
                var percentDrag;
                var Deg45 = 0;
               var currentAngle = 0;
               var lowestAngle = 0;
               var highestAngle = 0;
               var differenceAngle = 0;
                var tl = gsap.timeline();
                var throwdistance_pastTick=0
                var throwdistance_thisTick=0
                var throwdistance=0
                var isDrag = false

                   exportRoot.dragPress = function() {
                    if (canDrag) {
                       canRelease = true

                   isDrag = true
                   gsap.killTweensOf(mesh.rotation)
                   throwdistance_pastTick = throwdistance_thisTick
                   throwdistance_thisTick = mesh.rotation.y
                   throwdistance = throwdistance_thisTick - throwdistance_pastTick
                   throwdistance =throwdistance*15
                   percentDrag = (stage.mouseX/160) * 100;


                   if (init==0) {
                    init=1 ;

                   Deg45 = 1.5708;
                       // what percent is the current degree amount?
                   currentDegree = (Deg45/100) * percentDrag
                    offsetDegree = Deg45-currentDegree

                   currentAngle = mesh.rotation.y;
                   lowestAngle = currentAngle - currentDegree
                   highestAngle = currentAngle + offsetDegree
                   differenceAngle = highestAngle - lowestAngle;
                   }

                   mesh.rotation.y = (differenceAngle/100 * percentDrag)+lowestAngle;
                    }
                };

                function giveMeTheRightAnglePlease(floatNum) {
                    var num = ((floatNum+throwdistance) / 1.5708)
                    num = Math.round(num)
                    return num * 1.5708
                }
                var idArray = new Array(2,1,0,3,3)
                var faceID = 0
                exportRoot.mainMC.hit.addEventListener("pressup", function() { exportRoot.releaseDrag()})
                exportRoot.mainMC.hit.addEventListener("pressmove", function() {exportRoot.dragPress()})
                exportRoot.mainMC.hit.addEventListener("mousedown", function() {canDrag = true;})

               exportRoot.releaseDrag = function() {
                   if (canRelease) {
                        if (isDrag) {
                        isDrag = false
                        init=0
                        var currentRotation = mesh.rotation.y
                        var toLocation = giveMeTheRightAnglePlease(mesh.rotation.y)
                        faceID = (toLocation/(Math.PI*2))
                        faceID = (parseFloat(faceID).toFixed( 2 )- Math.floor(faceID))*4
                        faceID = (faceID==4) ? 0 : faceID
                        //remap faceID
                        if (faceID==2) {
                            faceID=0;
                        } else if (faceID==0) {
                            faceID=2
                        }
                       // console.log("currentRotation:"+currentRotation+"   toLocation:"+toLocation+"   idArray:"+idArray[faceID]+ "   faceID:"+faceID)


                        var distance = ((toLocation-currentRotation)<0) ? (toLocation-currentRotation)*-1 : (toLocation-currentRotation)

                       gsap.killTweensOf(mesh.rotation);

                        // console.log("currentRotation"+mesh.rotation.y+"  toLocation:"+toLocation+"  distance:"+distance +" throwdistance:"+throwdistance+ "  easeAmount:"+easeAmount)
                        gsap.to(mesh.rotation,2,{y:toLocation, ease:"elastic.out(1, 0.6)"});
                        //console.log("faceID:"+faceID)
                        if (!isIOS) vidID[0].pause()
                        if (!isIOS) vidID[1].pause()
                        if (!isIOS) vidID[2].pause()
                       if (faceID==1 && !isIOS || faceID==2 && !isIOS || faceID==3 && !isIOS) {
                           //vidID[idArray[faceID]-1].currentTime = 0.2;
                            vidID[faceID-1].play()
                        }
                        canRelease = false

                    }
                }
               }

				var scene = new THREE.Scene();
				  const fov = 50;
				  const aspect = 160/600;  // the canvas default
				  const near = 0.01;
				  const far = 60;
				  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
				  camera.position.set(0,0,7);

				//var targetPosition = new THREE.Vector2(-0.2, 0);
				//gsap.from(camera.position,9,{x:-1.2, y:0, z:0.4, ease:"power1.inOut"});

				 	//camera.rotation.y = 1
					//camera.position.z = 15


				var mesh
				var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });

				renderer.setSize(160, 600);
				webGL_container.appendChild( renderer.domElement );

				//orbit controls
				var controls = new THREE.OrbitControls( camera, renderer.domElement );
				// Remove default OrbitControls event listeners
				controls.dispose();
				controls.update();


				document.addEventListener('mousemove', onDocumentMouseMove, false);

	var screenCTX
	var screenTexture
    var screenTexture2
	var screenMat
	var screenGeom
	var screenMesh
	var mixer
	var clock = new THREE.Clock();

				function onDocumentMouseMove( event ) {
					// Manually fire the event in OrbitControls
					controls.handleMouseMoveRotate(event);
				}
				var radius = 1
                var initialize3d = true
				function animate() {
				requestAnimationFrame( animate );
                    if ((faceID+1)==1 || initialize3d) {screenTexture1.needsUpdate = true;}
                    if ((faceID+1)==2 || initialize3d) {screenTexture2.needsUpdate = true;}
                    if ((faceID+1)==3 || initialize3d) {screenTexture3.needsUpdate = true;}
                    if ((faceID+1)==4 || initialize3d) {screenTexture4.needsUpdate = true;}
					controls.update();
					renderer.render( scene, camera );

				}




var manager = new THREE.LoadingManager();
manager.onStart = function ( url, itemsLoaded, itemsTotal ) {

	//console.log( 'Started loading file: ' + url + '.\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );

};
var gltf
manager.onLoad = function () {

	//console.log( 'Loading complete!:');


};


manager.onProgress = function ( url, itemsLoaded, itemsTotal ) {

	//console.log( 'Loading file: ' + url + '.\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );

};

manager.onError = function ( url ) {

	//console.log( 'There was an error loading ' + url );

};
var objectURLs = [];
var loader = new THREE.GLTFLoader( manager );
loader.load( '3d/cube160x600.gltf', function ( gltf ) {

                screenTexture1 = new THREE.Texture(canvas1);
                screenTexture2 = new THREE.Texture(canvas2);
                screenTexture3 = new THREE.Texture(canvas3);
                screenTexture4 = new THREE.Texture(canvas4);



                var colorEmis = new THREE.Color( 1, 1, 1 );
                var color = new THREE.Color( 1,1, 1);

                screenTexture1.encoding = screenTexture2.encoding = screenTexture3.encoding = screenTexture4.encoding = THREE.LinearEncoding;//THREE.sRGBEncoding;// //


                screenTexture1.minFilter = screenTexture2.minFilter = screenTexture3.minFilter = screenTexture4.minFilter = THREE.LinearFilter;
                screenTexture1.magFilter = screenTexture2.minFilter = screenTexture3.minFilter = screenTexture4.minFilter = THREE.LinearFilter;

                screenTexture1.anisotropy = screenTexture2.anisotropy = screenTexture3.anisotropy = screenTexture4.anisotropy = 4

    /*
                var screenMat1 = new THREE.MeshBasicMaterial({emissiveMap:screenTexture1, map:screenTexture1, color:colorEmis,emissive:color, emissiveIntensity:1});
                var screenMat2 = new THREE.MeshBasicMaterial({emissiveMap:screenTexture2, map:screenTexture2, color:colorEmis,emissive:color, emissiveIntensity:1});
                var screenMat3 = new THREE.MeshBasicMaterial({emissiveMap:screenTexture3, map:screenTexture3, color:colorEmis,emissive:color, emissiveIntensity:1});
                var screenMat4 = new THREE.MeshBasicMaterial({emissiveMap:screenTexture4, map:screenTexture4, color:colorEmis,emissive:color, emissiveIntensity:1});

                screenEmis = new THREE.MeshBasicMaterial({ color: 0xffffff, transparent:true});
*/
                mesh = gltf.scene;
                var screenMat1 = new THREE.MeshBasicMaterial({map:screenTexture1});
                var screenMat2 = new THREE.MeshBasicMaterial({map:screenTexture2});
                var screenMat3 = new THREE.MeshBasicMaterial({map:screenTexture3});
                var screenMat4 = new THREE.MeshBasicMaterial({map:screenTexture4});

                screenEmis = new THREE.MeshBasicMaterial({ color: 0xffffff, transparent:true});
               // console.log( mesh)
                 //console.log( mesh.children[1].getObjectByName("Cube.001_0"))

                mesh.children[1].getObjectByName("Cube.001_0").material.map = screenTexture1;
                mesh.children[1].getObjectByName("Cube.001_0").material = screenMat1;
                mesh.children[1].getObjectByName("Cube.001_1").material.map = screenTexture2;
                mesh.children[1].getObjectByName("Cube.001_1").material = screenMat2;
                mesh.children[1].getObjectByName("Cube.001_2").material.map = screenTexture3;
                mesh.children[1].getObjectByName("Cube.001_2").material = screenMat3;
                mesh.children[1].getObjectByName("Cube.001_3").material.map = screenTexture4;
                mesh.children[1].getObjectByName("Cube.001_3").material = screenMat4;


                screenTexture1.flipY = screenTexture2.flipY = screenTexture3.flipY = screenTexture4.flipY = false;

                mesh.scale.set( 1, 1, 1);
                mesh.position.y+=-2.3
                mesh.rotation.y=3.14159265
                scene.add( mesh );

                var loadingImg = document.getElementById("img");
                gsap.from(mesh.rotation, 3, {y:"-=4.71238898",ease:"elastic.out(0.2, 0.2)"});
                gsap.from(mesh.position, 3, {z:"-=10",     ease:"elastic.out(0.1, 0.1)", onComplete:function(){loadingImg.style.display="none"}});

				camera.lookAt( new THREE.Vector3(0,0,0) );


				animate();
                initialize3d = false
	objectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );


} );



	function rotateObject(object, degreeX=0, degreeY=0, degreeZ=0) {
	   object.rotateX(THREE.Math.degToRad(degreeX));
	   object.rotateY(THREE.Math.degToRad(degreeY));
	   object.rotateZ(THREE.Math.degToRad(degreeZ));
	}
}
</script>
</body>
</html>
